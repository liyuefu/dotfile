set previewer ~/.config/lf/previewer

# Basic Settings
set hidden true
set ignorecase true
#set icons true
set sixel true
set drawbox
set rulerfmt "%d  |%a  |%p  |\033[7;31m %m \033[0m  |\033[7;33m %c \033[0m  |\033[7;35m %s \033[0m  |\033[7;34m %f \033[0m  |%i/%t"

# Custom Functions

# cmd goto ${{
#   cd "$(command lf -print-last-dir "$@")"
# }}
#
#


cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd tarcurrent ${{
    tar -czf "$PWD/$(basename $PWD).tar.gz" -C "$PWD" .
    lf -remote "send $id reload"
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trashy put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/html) lf -remote "send $id \$firefox \$fx >/dev/null 2>/dev/null &";;
		*) xdg-open "$f"
	esac
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

map f ${{
    selected="$(fzf)"
    [ -d "$selected" ] && cmd=cd || cmd=select
    lf -remote "send $id $cmd '$selected'"
}}


# Bindings
map c
#map d
#map m

# map co $vscodium "$f"
# map cf $dotbare fadd -f

#map au unarchive
# map ae $wine "$f"

# Basic Functions
map . set hidden!
#map dd trash
#map u $trashy restore -r 0
#map dr $trashy restore
#map de $trashy empty --all
map p paste
#map x cut
map y copy
map <enter> open
map R reload
map af mkfile
map ad mkdir
#map bg setwallpaper
#map C clear
map D delete
map T tarcurrent
map X extract
# Movement
map gpy cd /home/nome/work/workdir/dev/python
map gre cd /home/nome/work/workdir/report
map gdev cd /home/nome/work/workdir/dev
map ga cd /home/nome/work/workdir/Draft
map gco cd /home/nome/work/workdir/common
map gw cd /home/nome/work/workdir
map gpa cd /home/nome/passport
#map gso cd /home/nome/software
#map gop cd /home/nome/opensource
map gcf cd /home/nome/.config/
map gs cd /home/nome/work/知识分享
map gh cd /home/nome
map gD cd /home/nome/Downloads
map n $alacritty --config-file /home/nome/.config/alacritty/alacritty.toml
#map n $terminal
#map gt cd /home/nome/tmp
# map go goto

# map f ${{
#     selected="$(fzf)"
#     [ -d "$selected" ] && cmd=cd || cmd=select
#     lf -remote "send $id $cmd '$selected'"
# }}
#
